"""Analysis log information generated by model train and test process.
"""
import sys
import re
import argparse


def parse_cmd():
    """Parse cmd.
    """
    parser = argparse.ArgumentParser(
        description="Analysis log information generated by model train"
        " and test process. It will parse the metrics of last test pass."
        "And it will also parse customzied metrics in log file "
        "formated as bellow:\n\n"
        "  metric:cpu_time=123.0\n\n"
        "The script give results by 'key-value' in each line as bellow:\n\n"
        "  classification_error_evaluator=0.99\n"
        "  cpu_time=123.0",
        formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument(
        "--input_file",
        type=str,
        required=False,
        help=("Absolution path of input file. "
              "By default, it reads log content from stdin."),
        default=None)
    parser.add_argument(
        "--output_file",
        type=str,
        required=False,
        help=("Absolution path of result file."
              "Overwrites the existing file if the file exists."
              "If the file does not exist, creates a new file for writing."
              "By default, it writes result into stdout."),
        default=None)

    return parser.parse_args()


def main():
    """Analysis log information.
    """
    args = parse_cmd()
    out = sys.stdout
    inputs = sys.stdin
    if args.output_file is not None:
        out = open(args.output_file, 'w')
    if args.input_file is not None:
        inputs = open(args.input_file, 'r')

    test_metric_p = re.compile(r'.*Test at Pass \d+.*\{(.+:.+)\}$')
    customized_metric_p = re.compile(r'^metric:(.+=.+)')

    for line in reversed(inputs.readlines()):
        line = line.strip()
        # get metrics of last test pass
        test_metric_m = test_metric_p.match(line)
        if test_metric_m is not None:
            for result in test_metric_m.group(1).split(','):
                key, value = result.split(':')
                print >> out, "%s=%s" % (key.strip().strip('\''),
                                         value.strip().strip('\''))
            break
        # get customized metrics
        customized_metric_m = customized_metric_p.match(line)
        if customized_metric_m is not None:
            print >> out, customized_metric_m.group(1)
    return 0


if __name__ == "__main__":
    sys.exit(main())
